diff --git a/src/AppBundle/Test/ApiTestCase.php b/src/AppBundle/Test/ApiTestCase.php
new file mode 100644
index 0000000..c11c185
--- /dev/null
+++ b/src/AppBundle/Test/ApiTestCase.php
@@ -0,0 +1,282 @@
+<?php
+
+namespace AppBundle\Test;
+
+use Exception;
+use GuzzleHttp\Client;
+use GuzzleHttp\HandlerStack;
+use GuzzleHttp\Middleware;
+use Psr\Http\Message\RequestInterface;
+use Psr\Http\Message\ResponseInterface;
+use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
+use Symfony\Component\Console\Helper\FormatterHelper;
+use Symfony\Component\Console\Output\ConsoleOutput;
+use Symfony\Component\DomCrawler\Crawler;
+
+class ApiTestCase extends KernelTestCase
+{
+    use DataHelperTrait;
+
+    private static $staticClient;
+
+    /**
+     * @var array
+     */
+    private static $history = array();
+
+    /**
+     * @var Client
+     */
+    protected $client;
+
+    /**
+     * @var ConsoleOutput
+     */
+    private $output;
+
+    /**
+     * @var FormatterHelper
+     */
+    private $formatterHelper;
+
+    private $responseAsserter;
+
+    public static function setUpBeforeClass()
+    {
+        $handler = HandlerStack::create();
+
+        $handler->push(Middleware::history(self::$history));
+        $handler->push(Middleware::mapRequest(function(RequestInterface $request) {
+            $path = $request->getUri()->getPath();
+            if (strpos($path, '/app_test.php') !== 0) {
+                $path = '/app_test.php' . $path;
+            }
+            $uri = $request->getUri()->withPath($path);
+
+            return $request->withUri($uri);
+        }));
+
+        $baseUrl = getenv('TEST_BASE_URL');
+        if (!$baseUrl) {
+            throw new \Exception('The TEST_BASE_URL environment variable must be set!');
+        }
+
+        self::$staticClient = new Client([
+            'base_uri' => $baseUrl,
+            'http_errors' => false,
+            'handler' => $handler
+        ]);
+
+        self::bootKernel();
+    }
+
+    protected function setUp()
+    {
+        $this->client = self::$staticClient;
+        // reset the history
+        self::$history = array();
+
+        $this->purgeDatabase();
+    }
+
+    /**
+     * Clean up Kernel usage in this test.
+     */
+    protected function tearDown()
+    {
+        // purposefully not calling parent class, which shuts down the kernel
+    }
+
+    protected function onNotSuccessfulTest($e)
+    {
+        if ($lastResponse = $this->getLastResponse()) {
+            $this->printDebug('');
+            $this->printDebug('<error>Failure!</error> when making the following request:');
+            $this->printLastRequestUrl();
+            $this->printDebug('');
+
+            $this->debugResponse($lastResponse);
+        }
+
+        throw $e;
+    }
+
+    protected function getService($id)
+    {
+        return self::$kernel->getContainer()
+            ->get($id);
+    }
+
+    protected function printLastRequestUrl()
+    {
+        $lastRequest = $this->getLastRequest();
+
+        if ($lastRequest) {
+            $this->printDebug(sprintf('<comment>%s</comment>: <info>%s</info>', $lastRequest->getMethod(), $lastRequest->getUri()));
+        } else {
+            $this->printDebug('No request was made.');
+        }
+    }
+
+    protected function debugResponse(ResponseInterface $response)
+    {
+        foreach ($response->getHeaders() as $name => $values) {
+            $this->printDebug(sprintf('%s: %s', $name, implode(', ', $values)));
+        }
+        $body = (string) $response->getBody();
+
+        $contentType = $response->getHeader('Content-Type');
+        $contentType = $contentType[0];
+        if ($contentType == 'application/json' || strpos($contentType, '+json') !== false) {
+            $data = json_decode($body);
+            if ($data === null) {
+                // invalid JSON!
+                $this->printDebug($body);
+            } else {
+                // valid JSON, print it pretty
+                $this->printDebug(json_encode($data, JSON_PRETTY_PRINT));
+            }
+        } else {
+            // the response is HTML - see if we should print all of it or some of it
+            $isValidHtml = strpos($body, '</body>') !== false;
+
+            if ($isValidHtml) {
+                $this->printDebug('');
+                $crawler = new Crawler($body);
+
+                // very specific to Symfony's error page
+                $isError = $crawler->filter('#traces-0')->count() > 0
+                    || strpos($body, 'looks like something went wrong') !== false;
+                if ($isError) {
+                    $this->printDebug('There was an Error!!!!');
+                    $this->printDebug('');
+                } else {
+                    $this->printDebug('HTML Summary (h1 and h2):');
+                }
+
+                // finds the h1 and h2 tags and prints them only
+                foreach ($crawler->filter('h1, h2')->extract(array('_text')) as $header) {
+                    // avoid these meaningless headers
+                    if (strpos($header, 'Stack Trace') !== false) {
+                        continue;
+                    }
+                    if (strpos($header, 'Logs') !== false) {
+                        continue;
+                    }
+
+                    // remove line breaks so the message looks nice
+                    $header = str_replace("\n", ' ', trim($header));
+                    // trim any excess whitespace "foo   bar" => "foo bar"
+                    $header = preg_replace('/(\s)+/', ' ', $header);
+
+                    if ($isError) {
+                        $this->printErrorBlock($header);
+                    } else {
+                        $this->printDebug($header);
+                    }
+                }
+
+                $profilerUrl = $response->getHeader('X-Debug-Token-Link');
+                if ($profilerUrl) {
+                    $fullProfilerUrl = $response->getHeader('Host').$profilerUrl[0];
+                    $this->printDebug('');
+                    $this->printDebug(sprintf(
+                        'Profiler URL: <comment>%s</comment>',
+                        $fullProfilerUrl
+                    ));
+                }
+
+                // an extra line for spacing
+                $this->printDebug('');
+            } else {
+                $this->printDebug($body);
+            }
+        }
+    }
+
+    /**
+     * Print a message out - useful for debugging
+     *
+     * @param $string
+     */
+    protected function printDebug($string)
+    {
+        if ($this->output === null) {
+            $this->output = new ConsoleOutput();
+        }
+
+        $this->output->writeln($string);
+    }
+
+    /**
+     * Print a debugging message out in a big red block
+     *
+     * @param $string
+     */
+    protected function printErrorBlock($string)
+    {
+        if ($this->formatterHelper === null) {
+            $this->formatterHelper = new FormatterHelper();
+        }
+        $output = $this->formatterHelper->formatBlock($string, 'bg=red;fg=white', true);
+
+        $this->printDebug($output);
+    }
+
+    /**
+     * @return RequestInterface
+     */
+    private function getLastRequest()
+    {
+        if (!self::$history || empty(self::$history)) {
+            return null;
+        }
+
+        $history = self::$history;
+
+        $last = array_pop($history);
+
+        return $last['request'];
+    }
+
+    /**
+     * @return ResponseInterface
+     */
+    private function getLastResponse()
+    {
+        if (!self::$history || empty(self::$history)) {
+            return null;
+        }
+
+        $history = self::$history;
+
+        $last = array_pop($history);
+
+        return $last['response'];
+    }
+
+    /**
+     * @return ResponseAsserter
+     */
+    protected function asserter()
+    {
+        if ($this->responseAsserter === null) {
+            $this->responseAsserter = new ResponseAsserter();
+        }
+
+        return $this->responseAsserter;
+    }
+
+    /**
+     * Call this when you want to compare URLs in a test
+     *
+     * (since the returned URL's will have /app_test.php in front)
+     *
+     * @param string $uri
+     * @return string
+     */
+    protected function adjustUri($uri)
+    {
+        return '/app_test.php'.$uri;
+    }
+}
diff --git a/src/AppBundle/Test/DataHelperTrait.php b/src/AppBundle/Test/DataHelperTrait.php
new file mode 100644
index 0000000..01c6d41
--- /dev/null
+++ b/src/AppBundle/Test/DataHelperTrait.php
@@ -0,0 +1,42 @@
+<?php
+
+namespace AppBundle\Test;
+
+use AppBundle\Entity\Student;
+use Doctrine\Common\DataFixtures\Purger\ORMPurger;
+use Doctrine\ORM\EntityManager;
+
+/**
+ * Trait used in ApiTestCase to help load data into the database
+ */
+trait DataHelperTrait
+{
+    abstract protected function getService($id);
+
+    /**
+     * @return EntityManager
+     */
+    protected function getEntityManager()
+    {
+        return $this->getService('doctrine.orm.entity_manager');
+    }
+
+    protected function createStudent($email, $firstName = null, $lastName = null)
+    {
+        $student = new Student();
+        $student->setEmail($email);
+        $student->setFirstName($firstName);
+        $student->setLastName($lastName);
+
+        $this->getEntityManager()->persist($student);
+        $this->getEntityManager()->flush();
+
+        return $student;
+    }
+
+    private function purgeDatabase()
+    {
+        $purger = new ORMPurger($this->getEntityManager());
+        $purger->purge();
+    }
+}
diff --git a/src/AppBundle/Test/ResponseAsserter.php b/src/AppBundle/Test/ResponseAsserter.php
new file mode 100644
index 0000000..3bf6f82
--- /dev/null
+++ b/src/AppBundle/Test/ResponseAsserter.php
@@ -0,0 +1,180 @@
+<?php
+
+namespace AppBundle\Test;
+
+use Psr\Http\Message\ResponseInterface;
+use Symfony\Component\PropertyAccess\Exception\RuntimeException;
+use Symfony\Component\PropertyAccess\PropertyAccess;
+use Symfony\Component\PropertyAccess\Exception\AccessException;
+use Symfony\Component\PropertyAccess\PropertyAccessor;
+
+/**
+ * Helper class to assert different conditions on Guzzle responses
+ */
+class ResponseAsserter extends \PHPUnit_Framework_Assert
+{
+    /**
+     * @var PropertyAccessor
+     */
+    private $accessor;
+
+    /**
+     * Asserts the array of property names are in the JSON response
+     *
+     * @param ResponseInterface $response
+     * @param array $expectedProperties
+     * @throws \Exception
+     */
+    public function assertResponsePropertiesExist(ResponseInterface $response, array $expectedProperties)
+    {
+        foreach ($expectedProperties as $propertyPath) {
+            // this will blow up if the property doesn't exist
+            $this->readResponseProperty($response, $propertyPath);
+        }
+    }
+
+    /**
+     * Asserts the specific propertyPath is in the JSON response
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @throws \Exception
+     */
+    public function assertResponsePropertyExists(ResponseInterface $response, $propertyPath)
+    {
+        // this will blow up if the property doesn't exist
+        $this->readResponseProperty($response, $propertyPath);
+    }
+
+    /**
+     * Asserts the given property path does *not* exist
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @throws \Exception
+     */
+    public function assertResponsePropertyDoesNotExist(ResponseInterface $response, $propertyPath)
+    {
+        try {
+            // this will blow up if the property doesn't exist
+            $this->readResponseProperty($response, $propertyPath);
+
+            $this->fail(sprintf('Property "%s" exists, but it should not', $propertyPath));
+        } catch (RuntimeException $e) {
+            // cool, it blew up
+            // this catches all errors (but only errors) from the PropertyAccess component
+        }
+    }
+
+    /**
+     * Asserts the response JSON property equals the given value
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @param mixed $expectedValue
+     * @throws \Exception
+     */
+    public function assertResponsePropertyEquals(ResponseInterface $response, $propertyPath, $expectedValue)
+    {
+        $actual = $this->readResponseProperty($response, $propertyPath);
+        $this->assertEquals(
+            $expectedValue,
+            $actual,
+            sprintf(
+                'Property "%s": Expected "%s" but response was "%s"',
+                $propertyPath,
+                $expectedValue,
+                var_export($actual, true)
+            )
+        );
+    }
+
+    /**
+     * Asserts the response property is an array
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @throws \Exception
+     */
+    public function assertResponsePropertyIsArray(ResponseInterface $response, $propertyPath)
+    {
+        $this->assertInternalType('array', $this->readResponseProperty($response, $propertyPath));
+    }
+
+    /**
+     * Asserts the given response property (probably an array) has the expected "count"
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @param integer $expectedCount
+     * @throws \Exception
+     */
+    public function assertResponsePropertyCount(ResponseInterface $response, $propertyPath, $expectedCount)
+    {
+        $this->assertCount((int)$expectedCount, $this->readResponseProperty($response, $propertyPath));
+    }
+
+    /**
+     * Asserts the specific response property contains the given value
+     *
+     * e.g. "Hello world!" contains "world"
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @param mixed $expectedValue
+     * @throws \Exception
+     */
+    public function assertResponsePropertyContains(ResponseInterface $response, $propertyPath, $expectedValue)
+    {
+        $actualPropertyValue = $this->readResponseProperty($response, $propertyPath);
+        $this->assertContains(
+            $expectedValue,
+            $actualPropertyValue,
+            sprintf(
+                'Property "%s": Expected to contain "%s" but response was "%s"',
+                $propertyPath,
+                $expectedValue,
+                var_export($actualPropertyValue, true)
+            )
+        );
+    }
+
+    /**
+     * Reads a JSON response property and returns the value
+     *
+     * This will explode if the value does not exist
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @return mixed
+     * @throws \Exception
+     */
+    public function readResponseProperty(ResponseInterface $response, $propertyPath)
+    {
+        if ($this->accessor === null) {
+            $this->accessor = PropertyAccess::createPropertyAccessor();
+        }
+
+        $data = json_decode((string)$response->getBody());
+
+        if ($data === null) {
+            throw new \Exception(sprintf(
+                'Cannot read property "%s" - the response is invalid (is it HTML?)',
+                $propertyPath
+            ));
+        }
+
+        try {
+            return $this->accessor->getValue($data, $propertyPath);
+        } catch (AccessException $e) {
+            // it could be a stdClass or an array of stdClass
+            $values = is_array($data) ? $data : get_object_vars($data);
+
+            throw new AccessException(sprintf(
+                'Error reading property "%s" from available keys (%s)',
+                $propertyPath,
+                implode(', ', array_keys($values))
+            ));
+        }
+    }
+}
